// StlAlgorithmsDemo.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include "student.h"
#include <array>
#include <vector>
#include <iostream>
#include <algorithm>
#include <numeric>
#include <map>
using namespace std;

/*
	Немодифицирующие операции над последовательностями
*/
void demo1()
{
	/*
	Алгоритмы all_of, any_of, none_of
	Проверяют, является ли предикат верным (true) для всех (all_of),
	хотя бы одного из (any_of) или ни одного (none_of) из элементов в
	диапазоне (шаблон функции)
	*/
	array<int, 8> foo = { 3,5,7,11,13,17,19,23 };
	// Все ли элементы нечетные?
	
	// Хотя бы одно число отрицательное?
	
	// Нет ни одного отрицательного числа?
	
}

void pow2(int& n)
{
	n = n*n;
}

void demo2()
{
	/*
		Алгоритм for_each Применяет функцию к диапазону элементов
	*/
	array<int, 10> arr = { 1,2,3,4,5,6,7,8,9,10 };
}

void demo3()
{
	/*
	Алгоритмы count и count_if Возвращают количество элементов,
	удовлетворяющих определенным критериям
	*/

	int data[] = { 1, 2, 3, 4, 4, 3, 7, 8, 9, 10 };	
	vector<int> v(data, data + 10);

	int target1 = 3;
	int target2 = 5;
	// сколько раз повторяется число target1
	int num_items1;
	// сколько раз повторяется число target2
	int num_items2;
	// сколько нечетных чисел
	int num_odd; 
}


/*
	Операции минимума/максимума
*/

void demo4()
{
	vector<int> v = { 1, 2, 3, 4, 4, 3, 7, 8, 9, 0 };
	/*
		max_element возвращает наибольший элемент в диапазоне 
	*/
	
	/*
		min_element возвращает наименьший элемент в диапазоне
	*/

	/*
		minmax_element  возвращает наименьший и наибольший элемент в диапазоне 
	*/
}

// Модифицирующие операции над последовательностями
void demo5()
{
	vector<int> v = { 1, 2, 3, 4, 4, 3, 7, 8, 9, 0 };
	/*
		copy, copy_if  Копирует ряд элементов 
		copy_n Копирует ряд элементов в новое место
	*/

	/*
		fill присваивает определенное значение набору элементов 
		fill_n присваивает значение заданному числу элементов 
	*/

	/*
		generate сохраняет результат функции в диапазоне 
		generate_n сохраняет результат N применений функции 
	*/

	/*
		remove, remove_if удаляет элементы, удовлетворяющие определенным критериям
	*/
	
	/*
		random_shuffle, shuffle  перемешивает элементы на заданном диапазоне случайным образом 
	*/


	/*
		unique удаляет все последовательные эквивалентные элементы, кроме первого 
	*/
}


/*
	Операции сортировки (на отсортированных диапазонах)
*/

void demo6()
{
	/*
		is_sorted  проверяет, является ли диапазон отсортированы в порядке возрастания	
	*/

	/*	
		sort сортирует диапазон в порядке возрастания
	*/
}

/*
	Числовые операции
*/
void demo7()
{
	/*
		accumulate суммирует диапазон элементов 
	*/
}



void tasks()
{
	vector<student> students;
	students.emplace_back(student("Vasja", 16, gender::MAN));
	students.emplace_back(student("Petja", 23, gender::MAN));
	students.emplace_back(student("Sonja", 18, gender::WOMEN));
	students.emplace_back(student("Victor Ptrovitch", 65, gender::MAN));
	students.emplace_back(student("Dima", 25, gender::MAN));
	students.emplace_back(student("Katja", 21, gender::WOMEN));
	students.emplace_back(student("Semen", 33, gender::MAN));
	students.emplace_back(student("Elena", 42, gender::WOMEN));
	students.emplace_back(student("Ivan Ivanovitch", 69, gender::MAN));

	// Задание 1. Есть ли студенты младше 18 лет?

	// Задание 2. Есть ли студенты старше 60?

	// Задание 3. Сколько студентов старше 40?
		
	// Задание 4. Сколько студентов мужского пола?

	// Задание 5. Найти студента с максимальным возрастом

	// Задание 6. Найти студента с минимальным возрастом

	// Задание 7. Отсортировать студентов по возрасту

	// Задание 8. Отсортировать студентов по имени в обратном алфавитном порядке
	
	// Задание 9. Выбрать всех мужчин-военнообязанных (возраст от 18 до 27 лет)
	
	// Задание 10. Найти средний возраст среди мужчин
	
	// Задание 11. Найти кол-во потенциально работоспособных 
	// студентов в выборке (т.е. от 18 лет и учитывая 
	// что женщины выходят в 55 лет, а мужчина в 60)

	// Задание 12. Удалить всех студентов с четным возрастом

	// Задание 13. Перемешать всех студентов случайным образом

	// Задание 14. Подсчитать суммарный и средний возраст студентов
}
int main()
{
	demo1();
	demo2();
	demo3();
	demo4();
	demo5();

	tasks();
	return 0;
}

